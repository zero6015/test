객체, 클래스, 인스턴스 상태와 기능을 가지고 있는 고유 단위 = 객체(object)

자바에서 객체를 만들기 위한 설계도/틀 = class

class로 만든 (new) 객체 = 인스턴스(instance)

객체 지향의 4대 특성
1. 캡슐화(정보은닉)
	상태 + 기능 = 객체
	변수 + 메소드 = class
	예제) TV, 의자, 책을 객체로 만들자 - > class로 만들자.
	필드(변수)의 종류
		고유값(변경되지 않는 값)
		가변값(변경되는 값)
	가변값을 처리하는 기능을 제공 -> 메소드
	(Class_Ex01로~)
	
	정보은닉을 위한 장치 접근제어자
	제어자 종류
		접근 제어자(public, default, protected, private)
			public - 접근 제한 없음. (주로 메소드 앞에 붙여줌)
			default -  같은 패기지에서는 제한 없음,
			protected - 상속을 받을 경우 다른 패키지에서 접근 가능
			private - 접근 불가. (주로 변수 앞에 붙여줌)
			
		기타 제어자(접근 제어자가 아닌 제어자)
			- final 
			- abstract (추상화)
		  변수를 접근제어하고 메소드를 사용하면 좋은 점
	      접근 제어 겸 부가 기능을 제공할수 있음
	      필터 기능
	      ex) 자동차에서 가속할 경우 제한 속도 이상으로 속도가 증가되는 것을 막을 수 있다.
	  
	


2. 상속


3. 다형성

4. 추상화



-------------------------------------------------------------------------

 필드의 초기화 
1. 선언과 함께 초기화
   private int age = 1;
            
2. 메소드를 이용한 초기화
   Setter / Getter
   이 중에 Setter 메소드를 활용하여 초기화.
   Setter /Getter 자동생성
   팝업메뉴 source > Generate Getters and Setters..

* this 란?
인스턴스 자신의 주소를 저장하는 내부 필드
인스턴스 생성시 자동으로 만들어져서 주소를 저장함
여러 인스턴스가 존재할 경우 각 인스턴스의 필드를 구별하기 위해 사용
-> 매개변수와 필드(맴버)변수의 구분을 위해서 사용

* 메소드
  - 작업을 수행하기 위한 명령문의 집합
  - 어떤 값을 입력받아서 처리하고 그 결과를 돌려준다. 
  (입력받는 값이 없을 수도 있고 결과를 돌려주지 않을 수도 있다.)

  메소드의 장점
  - 반복적인 코드를 줄이고 코드의 관리가 용이하다.
  - 반복적으로 수행되는 여러 문장을 메소드로 작성한다.
  - 하나의 메소드는 한 가지 기능만 수행하도록 작성하는 것이 좋다.
  - 관련된 여러 문장을 메소드로 작성한다.

  메소드 정의 방법

  메소드는 클래스 영역에만 정의할 수 있음. (메소드 내부에 메소드를 정의할 수 없음)
  접근제어자 리턴타입 메소드명(매개변수 목록)
  {
  		기능 처리용 명령문들..
  		[return 변수/값/연산식;]
  }

  반환형
    메소드 마지막에 반환을 처리하는 return 문장이 있을 경우, 반환하는 값에 따라 결정.
    반환이 없을 경우 void를 사용.

  메소드의 유형
  1. 입력(매개변수)과 반환(return)이 있는 경우
  2. 입력만 있는 경우
  3. 반환만 있는 경우
  4. 둘다 없는 경우

  사용 방법
  다른 메소드에서 호출하여 사용
  반환값이 있을 경우 반환값을 받기위한 변수를 사용.
  int res = add(1, 2);
  1과 2를 더한 결과가 반환되어 res에 대입됨.

  반환값이 없을 경우 메소드이름(매개값)만 작성.
  setSpeed(10);
  10이 메소드에 들어감. 내부적 처리는 모름..

변수의 종류(맴버란?)
클래스 내부에 존재하는 변수, 메소드를 멤버라고 함.
크게 2가지로 구분
1. 맴버변수
	클래스 내부의, 메소드 밖에 있는 변수
	클래스 내부에서만 사용되는(존재하는) 변수
	인스턴스 멤버변수, 클래스(static) 멤버변수
	
	1.)멤버의 종류
		1. 클래스 멥버(static 멤버)
			변수나 메소드 앞에 static 키워드가 붙는 멤버
			인스턴스를 생성하지 않아도(new를 사용하지 않아도) 사용할 수 있는 멤버.
			다른 클래스에서 사용할 경우
				클래스이름.변수 = 값;
				클래스이름.메소드();
			같은 클래스에서 사용할 경우
				변수 = 값;
				메소드();
		2. 인스턴스 멤버
			변수나 메소드 앞에 static 키워드가 붙지 않는 멤버
			인스턴스를 생성해야(new를 사용하여) 사용할 수 있는 멤버

			다른 클래스에서 사용할 경우
			    인스턴스이름.변수 = 값;
			    인스턴스이름.메소드();
			같은 클래스에서 사용할 경우
			    변수 = 값;
				메소드();
    * 스태틱 메소드에서는 스태틱 멤버(변수, 메소드) 만 사용할 수 있다!
	
	
	
2. 지역변수
	일반 지역변수
	매개변수
	: 메소드 호출 시에만 생성되었다가 메소드 종료 시 제거.

----------------------------------------------------------------------------


3. 생성자(Constructor)
인스턴스가 생성될 때 마다 호출되는 '인스턴스 초기화 메소드'
인스턴스 변수의 초기화 또는 인스턴스 생성 시 수행해야할 작업을 작성.
몇가지 조건을 제외하고는 메소드와 같다.
모든 클래스에느 반드시 하나 이상의 생성자가 있어야 한다.

조건
1. 생성자의 이름은 클래스의 이름과 같아야 한다
2. return이 없다

class 클래스명{
	//생성자
	클래스명(매개변수목록)
}	

----------------------------------------------------------------------------

메소드 오버로딩(Method Overloading)

오버로드란? 
같은 이름의 메소드를 여러개 만들 수 있다. (ConstMain.java 예시2번 참고)

조건
1. 매개변수의 개수가 달라야 한다.
2. 매개변수의 타입이 달라야 한다.
3. 반환형은 판별 기준에 들어가지 않는다.

-----------------------------------------------------------------------------
생성자 오버로딩

매개변수가 다른 여러개의 생성자를 추가할 수 있음.

다른 생성자를 호출할 경우 this()를 사용.

 

 

this의 사용 

1. 매개변수(지역변수)와 멤버변수(필드)를 

   같은 이름으로 사용할 경우 멤버변수에

   'this.'을 앞에 붙인다. 예) this.num = num;

2. 같은 클래스의 생성자에서 다른 생성자를 호출할 때

   다른 생성자는 this(파라미터)로 호출한다.

 

생성자는 다른 메소드에서 호출할 수 없다!

 
 
 
 
 
 
 
 
 
 